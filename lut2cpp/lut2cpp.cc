#include <cmath>
#include <string>
#include <limits>
#include <fstream>
#include <vector>
#include <iomanip>
#include <iostream>

int lut2cpp(std::string &ifilename, std::string &ofilename);

int main(int argc, char **argv) {
    std::string ifilename, ofilename;
    int status = 0;

    for (int i = 1; i < argc; i++) {
        ifilename = std::string(argv[i]);
        status = ifilename.rfind('/');
        if (status == std::string::npos)
            status = 0;
        ofilename = /*"./output/" + */ifilename.substr(status);
        status = ofilename.rfind('.');
        ofilename = ofilename.substr(0, ofilename.rfind('.'));
        status = lut2cpp(ifilename, ofilename);
    }

    std::cout << std::endl;
    return status;
}

int lut2cpp(std::string &ifilename, std::string &ofilename) {
    std::ifstream ifile(ifilename);
    std::ofstream ofileh(ofilename+".h"), ofilecc(ofilename+".cc");
    int slash = ofilename.rfind('/');
    std::string ofname(ofilename.substr((slash != std::string::npos) ? slash : 0, std::string::npos));
    int max_val = std::numeric_limits<int>::min();
    int min_val = std::numeric_limits<int>::max();
    int tmp = 0;
    std::vector<int> vals;

    if (!ifile.is_open()) {
        std::cout << "Was not able to open file: " << ifilename << std::endl
                  << "Please try again." << std::endl;
        return -1;
    }
    if (!ofileh.is_open()) {
        std::cout << "Was not able to create file: " << ofilename << ".h" <<std::endl
                  << "Please try again." << std::endl;
        return -1;
    }
    if (!ofilecc.is_open()) {
        std::cout << "Was not able to create file: " << ofilename << ".cc" <<std::endl
                  << "Please try again." << std::endl;
        return -1;
    }

    std::cout << "Input file:  " << ifilename << std::endl
              << "Output file: " << ofilename << ".cc/.h" << std::endl;

    while (1) { // Collect data
        ifile >> tmp;
        if (!ifile.eof()) {
            //std::cout << tmp << std::endl;
            vals.push_back(tmp);
            if (tmp > max_val)
                max_val = tmp;
            if (tmp < max_val)
                min_val = tmp;
        } else
            break;
    }
    ifile.close();

    int max_bits = ceil(log2(max_val));
    int max_10bits = ceil(log10(max_val));
    int size = vals.size();
    ofileh << "/* LUT generated by lut2cpp by Rafael Hernandez using" << std::endl
          << " *     '" << ifilename << "'" << std::endl << " */" << std::endl << std::endl;

    ofileh << "#define USE_CONSTEXPR_" << ofname << std::endl
           << "#define " << ofname << "_MAX_BITS " << max_bits << std::endl
           << "#define " << ofname << "_SIZE " << size << std::endl << std::endl;
    ofileh.close();

    ofilecc << "/* LUT generated by lut2cpp by Rafael Hernandez using" << std::endl
          << " *     '" << ifilename << "'" << std::endl << " */" << std::endl << std::endl;

    ofilecc << "#ifdef USE_CONSTEXPR_" << ofname << std::endl
            << "constexpr int " << ofname << "_array[" << ofname << "_SIZE] = {" << std::endl
            << "#else" << std::endl
            << "ap_uint<" << ofname << "_MAX_BITS> " << ofname << "_array[" << ofname << "_SIZE] = {" << std::endl
            << "#endif" << std::endl << "    ";

    // Add values
    // 80 chars = 4 + 2 + line*max_10bits
    std::cout << "Bits needed: " << max_10bits << std::endl;
    int line = floor((80 - 4)/(max_10bits+2));
    if (line <= 0)
        line = 1;

    for (int i = 0; i < vals.size(); i++) {
        if      (i == vals.size() - 1)
            ofilecc << std::setw(max_10bits) << vals[i] << std::endl;
        else if (i % line >= line - 1) // if last character in line
            ofilecc << std::setw(max_10bits) << vals[i] << "," << std::endl << "    ";
        else
            ofilecc << std::setw(max_10bits) << vals[i] << ", ";
    }

    ofilecc << "};" << std::endl << std::endl;
    ofilecc.close();

    return 0;
}
